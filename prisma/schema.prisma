// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]
  hashedPassword String?
  laptops        Laptop[] // Relation to user's laptop recommendations

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

type ChatMessage {
  content   String
  role      String // 'user' or 'assistant'
  createdAt DateTime @default(now())
}

model Laptop {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  brand         String
  brandImage    String?
  price         String
  userId        String        @db.ObjectId
  specs         LaptopSpecs?
  url           String?
  imageUrl      String?
  pros          String[]
  cons          String[]
  shoppingLinks String[]
  summary       String?
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatMessages  ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model LaptopSpecs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  laptopId  String   @unique @db.ObjectId
  cpu       String
  gpu       String
  ram       Int
  storage   Int
  display   String
  battery   Int
  weight    String?
  laptop    Laptop   @relation(fields: [laptopId], references: [id])
  createdAt DateTime @default(now())
}
